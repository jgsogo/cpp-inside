extern crate protobuf_codegen_pure;
extern crate bindgen;


fn main() {
    protobuf_codegen_pure::run(protobuf_codegen_pure::Args {
        out_dir: "@CMAKE_CURRENT_SOURCE_DIR@/src/protos",
        input: &["@CMAKE_CURRENT_SOURCE_DIR@/../../messages/status.proto", "@CMAKE_CURRENT_SOURCE_DIR@/../../messages/help.proto"],
        includes: &["@CMAKE_CURRENT_SOURCE_DIR@/../../messages"],
        customize: protobuf_codegen_pure::Customize {
            ..Default::default()
        },
    }).expect("protoc");

    // The bindgen::Builder is the main entry point
    // to bindgen, and lets you build up options for
    // the resulting bindings.
    let bindings = bindgen::Builder::default()
        // The input header we would like to generate
        // bindings for.
        .header("@CMAKE_CURRENT_SOURCE_DIR@/../../library/crnd/include/api_c.h")
        .rustfmt_bindings(true)
        .clang_arg("-I@CMAKE_CURRENT_BINARY_DIR@/../../library")
        // Finish the builder and generate the bindings.
        .generate()
        // Unwrap the Result and panic on failure.
        .expect("Unable to generate bindings");

    // Write the bindings to the $OUT_DIR/bindings.rs file.
    bindings
        .write_to_file("@CMAKE_CURRENT_SOURCE_DIR@/src/bindings.rs")
        .expect("Couldn't write bindings!");
}
