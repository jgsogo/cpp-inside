package crnd

// Read for callback:
//      https://eli.thegreenplace.net/2019/passing-callbacks-and-pointers-to-cgo/
//      https://dev.to/mattn/call-go-function-from-c-function-1n3

/*
#cgo CFLAGS: -I@CURRENT_SOURCE_DIR@/../../library/crnd/include -I@CMAKE_CURRENT_BINARY_DIR@/../../library
#cgo LDFLAGS: -L@CRND_LIBRARY_PATH@ -lcrnd

#include <api_c.h>
#include <stdint.h>

typedef struct SerializedStruct {
    void* data;
    int64_t size;
} Serialized;
void cb_proxy(void* v, Serialized v2, Serialized v3);

static void cb_wrapper(void* v, const void* v2, const void* v3) {
    cb_proxy(v, *(Serialized*)v2, *(Serialized*)v3);
}

static void _fn_help(void *callback) {
      help(callback, cb_wrapper);
}

*/
import "C"

import (
    "fmt"
    "log"
    "unsafe"
    "github.com/mattn/go-pointer"
    messages "./messages"
    proto "github.com/golang/protobuf/proto"
)

type Callback struct {
    Func     func(unsafe.Pointer, C.Serialized, C.Serialized)
    UserData unsafe.Pointer
}

type WrapperCRND struct {
    DllPath   string
}

func callback_help(v unsafe.Pointer, help_in C.Serialized, status_in C.Serialized) {
    fmt.Printf("[go] > callback_help\n")

    status := &messages.Status{}
    status_in_data := (*[1 << 30]byte)(status_in.data)[:int(status_in.size):int(status_in.size)]
    if err := proto.Unmarshal(status_in_data, status); err != nil {
            log.Fatalln("Failed to parse status:", err)
    } else {
        //fmt.Printf(proto.MarshalTextString(status));

        help := &messages.Help{}
        help_in_data := (*[1 << 30]byte)(help_in.data)[:int(help_in.size):int(help_in.size)]
        if err := proto.Unmarshal(help_in_data, help); err != nil {
            log.Fatalln("Failed to parse help:", err)
        } else {
            fmt.Printf(proto.MarshalTextString(help));
        }
    }
    fmt.Printf("[go] < callback_help\n")
}

//export cb_proxy
func cb_proxy(v unsafe.Pointer, v1 C.Serialized, v2 C.Serialized) {
    cb := pointer.Restore(v).(*Callback)
    cb.Func(v, v1, v2)
}


func (e WrapperCRND) Help() {
    C._fn_help(pointer.Save(&Callback{
                         Func:     callback_help,
                         UserData: pointer.Save(&e),
                     }))
}
